Inter$AJ_euclid_A1toJ2 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x1'], x['J_ml_x2'], x['A_ml_y1'], x['J_ml_y2'], x['A_ml_z1'], x['J_ml_z2']))
Inter$AJ_euclid_A1toJ3 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x1'], x['J_ml_x3'], x['A_ml_y1'], x['J_ml_y3'], x['A_ml_z1'], x['J_ml_z3']))
Inter$AJ_euclid_A2toJ1 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x2'], x['J_ml_x1'], x['A_ml_y2'], x['J_ml_y1'], x['A_ml_z2'], x['J_ml_z1']))
Inter$AJ_euclid_A2toJ2 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x2'], x['J_ml_x2'], x['A_ml_y2'], x['J_ml_y2'], x['A_ml_z2'], x['J_ml_z2']))
Inter$AJ_euclid_A2toJ3 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x2'], x['J_ml_x3'], x['A_ml_y2'], x['J_ml_y3'], x['A_ml_z2'], x['J_ml_z3']))
Inter$AJ_euclid_A3toJ1 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x3'], x['J_ml_x1'], x['A_ml_y3'], x['J_ml_y1'], x['A_ml_z3'], x['J_ml_z1']))
Inter$AJ_euclid_A3toJ2 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x3'], x['J_ml_x2'], x['A_ml_y3'], x['J_ml_y2'], x['A_ml_z3'], x['J_ml_z2']))
Inter$AJ_euclid_A3toJ3 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x3'], x['J_ml_x3'], x['A_ml_y3'], x['J_ml_y3'], x['A_ml_z3'], x['J_ml_z3']))
ggplot(data = melt(Inter[, c("ID", "LM.Num", "LM.Name", "AJ_euclid_A1toJ1", "AJ_euclid_A1toJ2", "AJ_euclid_A1toJ3", "AJ_euclid_A2toJ1", "AJ_euclid_A2toJ2", "AJ_euclid_A2toJ3", "AJ_euclid_A3toJ1", "AJ_euclid_A3toJ2", "AJ_euclid_A3toJ3")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")+facet_wrap(~variable)
ggplot(data = melt(Inter[, c("ID", "LM.Num", "LM.Name", "AJ_euclid_A1toJ1", "AJ_euclid_A1toJ2", "AJ_euclid_A1toJ3", "AJ_euclid_A2toJ1", "AJ_euclid_A2toJ2", "AJ_euclid_A2toJ3", "AJ_euclid_A3toJ1", "AJ_euclid_A3toJ2", "AJ_euclid_A3toJ3")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=LM.Name))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")+ggtitle("Pairwise euclidean distance for all observers and iterations")
Inter$Euclid_A1toJauto <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x1'], x['J_auto_x'], x['A_ml_y1'], x['J_auto_y'], x['A_ml_z1'], x['J_auto_z']))
Inter$Euclid_A2toJauto <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x2'], x['J_auto_x'], x['A_ml_y2'], x['J_auto_y'], x['A_ml_z2'], x['J_auto_z']))
Inter$Euclid_A3toJauto <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x3'], x['J_auto_x'], x['A_ml_y3'], x['J_auto_y'], x['A_ml_z3'], x['J_auto_z']))
Inter$Euclid_J1toAauto <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x1'], x['A_auto_x'], x['J_ml_y1'], x['A_auto_y'], x['J_ml_z1'], x['A_auto_z']))
Inter$Euclid_J2toAauto <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x2'], x['A_auto_x'], x['J_ml_y2'], x['A_auto_y'], x['J_ml_z2'], x['A_auto_z']))
Inter$Euclid_J3toAauto <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x3'], x['A_auto_x'], x['J_ml_y3'], x['A_auto_y'], x['J_ml_z3'], x['A_auto_z']))
Inter$Euclid_AautotoJauto <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_auto_x'], x['J_auto_x'], x['A_auto_y'], x['J_auto_y'], x['A_auto_z'], x['J_auto_z']))
Inter$Euclid_A1toJloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x1'], x['J_loo_x'], x['A_ml_y1'], x['J_loo_y'], x['A_ml_z1'], x['J_loo_z']))
Inter$Euclid_A2toJloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x2'], x['J_loo_x'], x['A_ml_y2'], x['J_loo_y'], x['A_ml_z2'], x['J_loo_z']))
Inter$Euclid_A3toJloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x3'], x['J_loo_x'], x['A_ml_y3'], x['J_loo_y'], x['A_ml_z3'], x['J_loo_z']))
Inter$Euclid_J1toAloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x1'], x['A_loo_x'], x['J_ml_y1'], x['A_loo_y'], x['J_ml_z1'], x['A_loo_z']))
Inter$Euclid_J2toAloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x2'], x['A_loo_x'], x['J_ml_y2'], x['A_loo_y'], x['J_ml_z2'], x['A_loo_z']))
Inter$Euclid_J3toAloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x3'], x['A_loo_x'], x['J_ml_y3'], x['A_loo_y'], x['J_ml_z3'], x['A_loo_z']))
Inter$Euclid_AlootoJloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_loo_x'], x['J_loo_x'], x['A_loo_y'], x['J_loo_y'], x['A_loo_z'], x['J_loo_z']))
InterPairwiseMelt <- melt(Inter[c("ID", "LM.Num", "LM.Name", "AJ_euclid_A1toJ1", "AJ_euclid_A1toJ2", "AJ_euclid_A1toJ3", "AJ_euclid_A2toJ1", "AJ_euclid_A2toJ2", "AJ_euclid_A2toJ3", "AJ_euclid_A3toJ1", "AJ_euclid_A3toJ2", "AJ_euclid_A3toJ3", "Euclid_A1toJloo", "Euclid_A2toJloo", "Euclid_A3toJloo", "Euclid_J1toAloo", "Euclid_J2toAloo", "Euclid_J3toAloo", "Euclid_AlootoJloo")], id.vars = c("ID", "LM.Num", "LM.Name"))
levels(InterPairwiseMelt$variable) <- c("ML to ML", "ML to ML", "ML to ML", "ML to ML", "ML to ML", "ML to ML", "ML to ML", "ML to ML", "ML to ML", "ML to loo", "ML to loo", "ML to loo", "ML to loo", "ML to loo", "ML to loo", "loo to loo")
ggplot(InterPairwiseMelt, aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Pairwise euclidean distance")
InterLooToCentMelt <- melt(Inter[c("ID", "LM.Num", "LM.Name", "Ml_euclid_A1tocent", "Ml_euclid_A2tocent", "Ml_euclid_A3tocent", "Ml_euclid_J1tocent", "Ml_euclid_J2tocent", "Ml_euclid_J3tocent", "Loo_euclid_AtoB", "Loo_euclid_JtoB", "AJ_loo_euclid_Atocent", "AJ_loo_euclid_Jtocent")], id.vars = c("ID", "LM.Num", "LM.Name"))
levels(InterLooToCentMelt$variable) <- c("ML", "ML", "ML to B", "ML to B", "ML to B", "ML to B", "Loo to B", "Loo to B", "Loo to AJ avg", "Loo to AJ avg")
ggplot(InterLooToCentMelt, aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Euclidean distance to centroid")
Inter$Euclid_AavgtoJavg <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_avgx'], x['J_ml_avgx'], x['A_ml_avgy'], x['J_ml_avgy'], x['A_ml_avgz'], x['J_ml_avgz']))
Inter$Euclid_AavgtoJLoo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_avgx'], x['J_Loo_x'], x['A_ml_avgy'], x['J_Loo_y'], x['A_ml_avgz'], x['J_Loo_z']))
Inter$Euclid_JavgtoALoo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_avgx'], x['A_Loo_x'], x['J_ml_avgy'], x['A_Loo_y'], x['J_ml_avgz'], x['A_Loo_z']))
Inter$Euclid_AavgtoJavg <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_avgx'], x['J_ml_avgx'], x['A_ml_avgy'], x['J_ml_avgy'], x['A_ml_avgz'], x['J_ml_avgz']))
Inter$Euclid_AavgtoJloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_avgx'], x['J_loo_x'], x['A_ml_avgy'], x['J_loo_y'], x['A_ml_avgz'], x['J_loo_z']))
Inter$Euclid_JavgtoAloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_avgx'], x['A_loo_x'], x['J_ml_avgy'], x['A_loo_y'], x['J_ml_avgz'], x['A_loo_z']))
Inter$Euclid_AavgtoJavg <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_avgx'], x['J_ml_avgx'], x['A_ml_avgy'], x['J_ml_avgy'], x['A_ml_avgz'], x['J_ml_avgz']))
Inter$Euclid_AavgtoJloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_avgx'], x['J_loo_x'], x['A_ml_avgy'], x['J_loo_y'], x['A_ml_avgz'], x['J_loo_z']))
Inter$Euclid_JavgtoAloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_avgx'], x['A_loo_x'], x['J_ml_avgy'], x['A_loo_y'], x['J_ml_avgz'], x['A_loo_z']))
InterPairwiseAvgMelt <- melt(Inter[c("ID", "LM.Num", "LM.Name", "Euclid_AavgtoJavg", "Euclid_AavgtoJloo", "Euclid_JavgtoAloo", "Euclid_AlootoJloo")], id.vars = c("ID", "LM.Num", "LM.Name"))
levels(InterPairwiseAvgMelt$variable) <- c("ML to ML", "ML to loo", "ML to loo", "loo to loo")
ggplot(InterPairwiseAvgMelt, aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Pairwise euclidean distance")
InterByLandmark <- ddply(.data = Inter, ~ LM.Name , summarize, B_ml_sdx = mean(B_ml_sdx), B_ml_sdy = mean(B_ml_sdy), B_ml_sdz = mean(B_ml_sdz), B_ml_euclid_A1tocent = mean(B_ml_euclid_A1tocent), B_ml_euclid_A2tocent = mean(B_ml_euclid_A2tocent), B_ml_euclid_A3tocent = mean(B_ml_euclid_A3tocent), B_ml_euclid_J1tocent = mean(B_ml_euclid_J1tocent), B_ml_euclid_J2tocent = mean(B_ml_euclid_J2tocent), B_ml_euclid_J3tocent = mean(B_ml_euclid_J3tocent), B_ml_avg_euclid_tocent = mean(B_ml_avg_euclid_tocent), B_ml_sd_euclid_tocent = mean(B_ml_sd_euclid_tocent), B_ml_euclid_A1toJ1 = mean(B_ml_euclid_A1toJ1), B_ml_euclid_A1toJ2 = mean(B_ml_euclid_A1toJ2), B_ml_euclid_A1toJ3 = mean(B_ml_euclid_A1toJ3), B_ml_euclid_A2toJ1 = mean(B_ml_euclid_A2toJ1), B_ml_euclid_A2toJ2 = mean(B_ml_euclid_A2toJ2), B_ml_euclid_A2toJ3 = mean(B_ml_euclid_A2toJ3), B_ml_euclid_A3toJ1 = mean(B_ml_euclid_A3toJ1), B_ml_euclid_A3toJ2 = mean(B_ml_euclid_A3toJ2), B_ml_euclid_A3toJ3 = mean(B_ml_euclid_A3toJ3), B_ml_avg_euclid_pairwise = mean(B_ml_avg_euclid_pairwise), B_ml_sd_euclid_pairwise = mean(B_ml_sd_euclid_pairwise))
colnames(Inter)
library(ggplot2)
library(readxl)
library(readr)
library(GGally)
library(plyr)
library(reshape2)
library(geomorph)
library(Morpho)
library(car)
library(R.matlab)
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
EuclideanDistance <- function(x1,x2,y1,y2,z1,z2){sqrt(sum((x1-x2)^2+(y1-y2)^2+(z1-z2)^2))}
landmarks <- read_excel("C:/Users/Julie White/Box/MyFiles/MyResearch/RemappingValidation/PeterLandmarks/SparseLandmarkingManualAndAutomaticv20180226LOO.xlsx", sheet = "Combined")
head(landmarks)
landmarks$A_ml_avgx <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("A_ml_x1", "A_ml_x2", "A_ml_x3")]))
landmarks$A_ml_avgy <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("A_ml_y1", "A_ml_y2", "A_ml_y3")]))
landmarks$A_ml_avgz <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("A_ml_z1", "A_ml_z2", "A_ml_z3")]))
landmarks$J_ml_avgx <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("J_ml_x1", "J_ml_x2", "J_ml_x3")]))
landmarks$J_ml_avgy <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("J_ml_y1", "J_ml_y2", "J_ml_y3")]))
landmarks$J_ml_avgz <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("J_ml_z1", "J_ml_z2", "J_ml_z3")]))
landmarks$B_ml_avgx <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("A_ml_x1", "A_ml_x2", "A_ml_x3", "J_ml_x1", "J_ml_x2", "J_ml_x3")]))
landmarks$B_ml_avgy <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("A_ml_y1", "A_ml_y2", "A_ml_y3", "J_ml_y1", "J_ml_y2", "J_ml_y3")]))
landmarks$B_ml_avgz <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("A_ml_z1", "A_ml_z2", "A_ml_z3", "J_ml_z1", "J_ml_z2", "J_ml_z3")]))
par(mfrow=c(3,3))
plot(landmarks$A_ml_avgx, landmarks$A_surf_avgx)
plot(landmarks$A_ml_avgy, landmarks$A_surf_avgy)
plot(landmarks$A_ml_avgz, landmarks$A_surf_avgz)
plot(landmarks$J_ml_avgx, landmarks$J_surf_avgx)
plot(landmarks$J_ml_avgy, landmarks$J_surf_avgy)
plot(landmarks$J_ml_avgz, landmarks$J_surf_avgz)
plot(landmarks$B_ml_avgx, landmarks$B_surf_avgx)
plot(landmarks$B_ml_avgy, landmarks$B_surf_avgy)
plot(landmarks$B_ml_avgz, landmarks$B_surf_avgz)
cor(landmarks$A_ml_avgx, landmarks$A_surf_avgx)
cor(landmarks$A_ml_avgy, landmarks$A_surf_avgy)
cor(landmarks$A_ml_avgz, landmarks$A_surf_avgz)
cor(landmarks$J_ml_avgx, landmarks$J_surf_avgx)
cor(landmarks$J_ml_avgy, landmarks$J_surf_avgy)
cor(landmarks$J_ml_avgz, landmarks$J_surf_avgz)
cor(landmarks$B_ml_avgx, landmarks$B_surf_avgx)
cor(landmarks$B_ml_avgy, landmarks$B_surf_avgy)
cor(landmarks$B_ml_avgz, landmarks$B_surf_avgz)
# Calculate euclidean distance between the manual and surface landmarks
landmarks$A_ml_surf_euclid <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_avgx'], x['A_surf_avgx'], x['A_ml_avgy'], x['A_surf_avgy'], x['A_ml_avgz'], x['A_surf_avgz']))
landmarks$J_ml_surf_euclid <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_avgx'], x['J_surf_avgx'], x['J_ml_avgy'], x['J_surf_avgy'], x['J_ml_avgz'], x['J_surf_avgz']))
landmarks$B_ml_surf_euclid <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['B_ml_avgx'], x['B_surf_avgx'], x['B_ml_avgy'], x['B_surf_avgy'], x['B_ml_avgz'], x['B_surf_avgz']))
# Plot
ggplot(data = melt(landmarks[,c("ID", "LM.Num", "LM.Name", "A_ml_surf_euclid", "J_ml_surf_euclid", "B_ml_surf_euclid")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y = value, color = variable))+geom_boxplot()+theme(legend.position = "top", axis.text.x = element_text(angle=90, hjust=1, vjust=0))+ylab("Euclidean Distance")
ggplot(data = melt(landmarks[,c("ID", "LM.Num", "LM.Name", "A_ml_surf_euclid", "J_ml_surf_euclid", "B_ml_surf_euclid")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y = value, fill = LM.Name))+geom_boxplot()+theme(legend.position = "none", axis.text.x = element_text(angle=90, hjust=1, vjust=0)) + ylab("Euclidean Distance")
par(mfrow=c(3,3))
plot(landmarks$A_ml_avgx, landmarks$A_loo_x)
plot(landmarks$A_ml_avgy, landmarks$A_loo_y)
plot(landmarks$A_ml_avgz, landmarks$A_loo_z)
plot(landmarks$J_ml_avgx, landmarks$J_loo_x)
plot(landmarks$J_ml_avgy, landmarks$J_loo_y)
plot(landmarks$J_ml_avgz, landmarks$J_loo_z)
plot(landmarks$B_ml_avgx, landmarks$B_loo_x)
plot(landmarks$B_ml_avgy, landmarks$B_loo_y)
plot(landmarks$B_ml_avgz, landmarks$B_loo_z)
cor(landmarks$A_ml_avgx, landmarks$A_loo_x)
cor(landmarks$A_ml_avgy, landmarks$A_loo_y)
cor(landmarks$A_ml_avgz, landmarks$A_loo_z)
cor(landmarks$J_ml_avgx, landmarks$J_loo_x)
cor(landmarks$J_ml_avgy, landmarks$J_loo_y)
cor(landmarks$J_ml_avgz, landmarks$J_loo_z)
cor(landmarks$B_ml_avgx, landmarks$B_loo_x)
cor(landmarks$B_ml_avgy, landmarks$B_loo_y)
cor(landmarks$B_ml_avgz, landmarks$B_loo_z)
# Calculate euclidean distance between the manual and automatic landmarks
landmarks$A_ml_loo_euclid <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_avgx'], x['A_loo_x'], x['A_ml_avgy'], x['A_loo_y'], x['A_ml_avgz'], x['A_loo_z']))
landmarks$J_ml_loo_euclid <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_avgx'], x['J_loo_x'], x['J_ml_avgy'], x['J_loo_y'], x['J_ml_avgz'], x['J_loo_z']))
landmarks$B_ml_loo_euclid <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['B_ml_avgx'], x['B_loo_x'], x['B_ml_avgy'], x['B_loo_y'], x['B_ml_avgz'], x['B_loo_z']))
# Plot
ggplot(data = melt(landmarks[,c("ID", "LM.Num", "LM.Name", "A_ml_loo_euclid", "J_ml_loo_euclid", "B_ml_loo_euclid")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y = value, fill = variable))+geom_boxplot()+theme(legend.position = "top", axis.text.x = element_text(angle=90, hjust=1, vjust=0)) +ylab("Euclidean Distance")
ggplot(data = melt(landmarks[,c("ID", "LM.Num", "LM.Name", "A_ml_loo_euclid", "J_ml_loo_euclid", "B_ml_loo_euclid")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y = value, fill = LM.Name))+geom_boxplot()+theme(legend.position = "none", axis.text.x = element_text(angle=90, hjust=1, vjust=0)) + ylab("Euclidean distance")
ArslanIntra <- landmarks[,c("ID", "LM.Num", "LM.Name")]
ArslanIntra$A_ml_sdx <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("A_ml_x1", "A_ml_x2", "A_ml_x3")]))
ArslanIntra$A_ml_sdy <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("A_ml_y1", "A_ml_y2", "A_ml_y3")]))
ArslanIntra$A_ml_sdz <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("A_ml_z1", "A_ml_z2", "A_ml_z3")]))
mean(ArslanIntra$A_ml_sdx)
mean(ArslanIntra$A_ml_sdy)
mean(ArslanIntra$A_ml_sdz)
ggplot(data = melt(ArslanIntra[, c("ID", "LM.Num", "LM.Name", "A_ml_sdx", "A_ml_sdy", "A_ml_sdz")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Standard Deviation (mm)")
ggplot(data = melt(ArslanIntra[, c("ID", "LM.Num", "LM.Name", "A_ml_sdx", "A_ml_sdy", "A_ml_sdz")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=LM.Name))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Standard Deviation (mm)")+ggtitle("Standard deviation of x, y, and z")
ArslanIntra$A_mlloo_sdx <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("A_ml_x1", "A_ml_x2", "A_ml_x3", "A_loo_x")]))
ArslanIntra$A_mlloo_sdy <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("A_ml_y1", "A_ml_y2", "A_ml_y3", "A_loo_y")]))
ArslanIntra$A_mlloo_sdz <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("A_ml_z1", "A_ml_z2", "A_ml_z3", "A_loo_z")]))
mean(ArslanIntra$A_mlloo_sdx)
mean(ArslanIntra$A_mlloo_sdy)
mean(ArslanIntra$A_mlloo_sdz)
multiplot(
ggplot(data = melt(ArslanIntra[, c("ID", "LM.Num", "LM.Name", "A_ml_sdx", "A_mlloo_sdx")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Standard Deviation (mm)")+ggtitle("X"),
ggplot(data = melt(ArslanIntra[, c("ID", "LM.Num", "LM.Name", "A_ml_sdy", "A_mlloo_sdy")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Standard Deviation (mm)")+ggtitle("Y"),
ggplot(data = melt(ArslanIntra[, c("ID", "LM.Num", "LM.Name", "A_ml_sdz", "A_mlloo_sdz")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Standard Deviation (mm)")+ggtitle("Z"),
cols=3)
ArslanIntraSDMelt <- melt(ArslanIntra[, c("ID", "LM.Num", "LM.Name", "A_ml_sdx", "A_ml_sdy", "A_ml_sdz", "A_mlloo_sdx", "A_mlloo_sdy", "A_mlloo_sdz")], id.vars = c("ID", "LM.Num", "LM.Name"))
levels(ArslanIntraSDMelt$variable) <- c("ML", "ML", "ML", "ML+loo", "ML+loo", "ML+loo")
ggplot(data = ArslanIntraSDMelt, aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Standard Deviation (mm)")
ArslanIntra$A_ml_euclid_1tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x1'], x['A_ml_avgx'], x['A_ml_y1'], x['A_ml_avgy'], x['A_ml_z1'], x['A_ml_avgz']))
ArslanIntra$A_ml_euclid_2tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x2'], x['A_ml_avgx'], x['A_ml_y2'], x['A_ml_avgy'], x['A_ml_z2'], x['A_ml_avgz']))
ArslanIntra$A_ml_euclid_3tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x3'], x['A_ml_avgx'], x['A_ml_y3'], x['A_ml_avgy'], x['A_ml_z3'], x['A_ml_avgz']))
mean(ArslanIntra$A_ml_euclid_1tocent)
mean(ArslanIntra$A_ml_euclid_2tocent)
mean(ArslanIntra$A_ml_euclid_3tocent)
ggplot(data = melt(ArslanIntra[, c("ID", "LM.Num", "LM.Name", "A_ml_euclid_1tocent", "A_ml_euclid_2tocent", "A_ml_euclid_3tocent")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")
ggplot(data = melt(ArslanIntra[, c("ID", "LM.Num", "LM.Name", "A_ml_euclid_1tocent", "A_ml_euclid_2tocent", "A_ml_euclid_3tocent")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=LM.Name))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")+ggtitle("Euclidean distance to centroid")
landmarks$A_mlloo_avgx <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("A_ml_x1", "A_ml_x2", "A_ml_x3", "A_loo_x")]))
landmarks$A_mlloo_avgy <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("A_ml_y1", "A_ml_y2", "A_ml_y3", "A_loo_y")]))
landmarks$A_mlloo_avgz <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("A_ml_z1", "A_ml_z2", "A_ml_z3", "A_loo_z")]))
ArslanIntra$A_mlloo_euclid_1tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x1'], x['A_mlloo_avgx'], x['A_ml_y1'], x['A_mlloo_avgy'], x['A_ml_z1'], x['A_mlloo_avgz']))
ArslanIntra$A_mlloo_euclid_2tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x2'], x['A_mlloo_avgx'], x['A_ml_y2'], x['A_mlloo_avgy'], x['A_ml_z2'], x['A_mlloo_avgz']))
ArslanIntra$A_mlloo_euclid_3tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x3'], x['A_mlloo_avgx'], x['A_ml_y3'], x['A_mlloo_avgy'], x['A_ml_z3'], x['A_mlloo_avgz']))
ArslanIntra$A_mlloo_euclid_lootocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_loo_x'], x['A_mlloo_avgx'], x['A_loo_y'], x['A_mlloo_avgy'], x['A_loo_z'], x['A_mlloo_avgz']))
mean(ArslanIntra$A_mlloo_euclid_1tocent)
mean(ArslanIntra$A_mlloo_euclid_2tocent)
mean(ArslanIntra$A_mlloo_euclid_3tocent)
mean(ArslanIntra$A_mlloo_euclid_lootocent)
ggplot(data = melt(ArslanIntra[, c("ID", "LM.Num", "LM.Name", "A_mlloo_euclid_1tocent", "A_mlloo_euclid_2tocent", "A_mlloo_euclid_3tocent", "A_mlloo_euclid_lootocent")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Euclidean distance")
ArslanIntraCentMelt <- melt(ArslanIntra[, c("ID", "LM.Num", "LM.Name", "A_ml_euclid_1tocent", "A_ml_euclid_2tocent", "A_ml_euclid_3tocent", "A_mlloo_euclid_1tocent", "A_mlloo_euclid_2tocent", "A_mlloo_euclid_3tocent", "A_mlloo_euclid_lootocent")], id.vars = c("ID", "LM.Num", "LM.Name"))
levels(ArslanIntraCentMelt$variable) <- c("ML", "ML", "ML", "ML+loo", "ML+loo", "ML+loo", "ML+loo")
ggplot(data = ArslanIntraCentMelt, aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Euclidean distance to centroid")
#Arslan x1 - x2
#Arslan x1 - x3
#Arslan x2 - x3
ArslanIntra$A_ml_euclid_1to2 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x1'], x['A_ml_x2'], x['A_ml_y1'], x['A_ml_y2'], x['A_ml_z1'], x['A_ml_z2']))
ArslanIntra$A_ml_euclid_1to3 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x1'], x['A_ml_x3'], x['A_ml_y1'], x['A_ml_y3'], x['A_ml_z1'], x['A_ml_z3']))
ArslanIntra$A_ml_euclid_2to3 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x2'], x['A_ml_x3'], x['A_ml_y2'], x['A_ml_y3'], x['A_ml_z2'], x['A_ml_z3']))
ggplot(data = melt(ArslanIntra[, c("ID", "LM.Num", "LM.Name", "A_ml_euclid_1to2", "A_ml_euclid_1to3", "A_ml_euclid_2to3")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Euclidean distance")
ggplot(data = melt(ArslanIntra[, c("ID", "LM.Num", "LM.Name", "A_ml_euclid_1to2", "A_ml_euclid_1to3", "A_ml_euclid_2to3")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x = LM.Name, y = value, fill=LM.Name))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")
#Arslan x1 - x2
#Arslan x1 - x3
#Arslan x2 - x3
#Arslan x1 - loo
#Arslan x2 - loo
#Arslan x3 - loo
ArslanIntra$A_ml_euclid_1toloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x1'], x['A_loo_x'], x['A_ml_y1'], x['A_loo_y'], x['A_ml_z1'], x['A_loo_z']))
ArslanIntra$A_ml_euclid_2toloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x2'], x['A_loo_x'], x['A_ml_y2'], x['A_loo_y'], x['A_ml_z2'], x['A_loo_z']))
ArslanIntra$A_ml_euclid_3toloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x3'], x['A_loo_x'], x['A_ml_y3'], x['A_loo_y'], x['A_ml_z3'], x['A_loo_z']))
ggplot(data = melt(ArslanIntra[, c("ID", "LM.Num", "LM.Name", "A_ml_euclid_1to2", "A_ml_euclid_1to3", "A_ml_euclid_2to3", "A_ml_euclid_1toloo", "A_ml_euclid_2toloo", "A_ml_euclid_3toloo")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Euclidean distance")
ArslanIntraPairwiseMelt <- melt(ArslanIntra[, c("ID", "LM.Num", "LM.Name", "A_ml_euclid_1to2", "A_ml_euclid_1to3", "A_ml_euclid_2to3", "A_ml_euclid_1toloo", "A_ml_euclid_2toloo", "A_ml_euclid_3toloo")], id.vars = c("ID", "LM.Num", "LM.Name"))
levels(ArslanIntraPairwiseMelt$variable) <- c("ML", "ML", "ML", "ML+loo", "ML+loo", "ML+loo")
ggplot(data = ArslanIntraPairwiseMelt, aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Pairwise euclidean distance between iterations")
ArslanIntraPairwiseMelt_JustML <- melt(ArslanIntra[, c("ID", "LM.Num", "LM.Name", "A_ml_euclid_1to2", "A_ml_euclid_1to3", "A_ml_euclid_2to3")], id.vars = c("ID", "LM.Num", "LM.Name"))
ArslanIntraPairwiseMelt2 <- rbind(ArslanIntraPairwiseMelt, ArslanIntraPairwiseMelt_JustML)
rm(ArslanIntraPairwiseMelt_JustML)
levels(ArslanIntraPairwiseMelt2$variable) <- c("ML+loo", "ML+loo", "ML", "ML", "ML")
ggplot(ArslanIntraPairwiseMelt2, aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+ theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1))+ylab("Euclidean distance")+ggtitle("Pairwise euclidean distance for just ML and ML+loo values")
JulieIntra <- landmarks[,c("ID", "LM.Num", "LM.Name")]
JulieIntra$J_ml_sdx <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("J_ml_x1", "J_ml_x2", "J_ml_x3")]))
JulieIntra$J_ml_sdy <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("J_ml_y1", "J_ml_y2", "J_ml_y3")]))
JulieIntra$J_ml_sdz <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("J_ml_z1", "J_ml_z2", "J_ml_z3")]))
mean(JulieIntra$J_ml_sdx)
mean(JulieIntra$J_ml_sdy)
mean(JulieIntra$J_ml_sdz)
ggplot(data = melt(JulieIntra[, c("ID", "LM.Num", "LM.Name", "J_ml_sdx", "J_ml_sdy", "J_ml_sdz")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Standard Deviation (mm)")
ggplot(data = melt(JulieIntra[, c("ID", "LM.Num", "LM.Name", "J_ml_sdx", "J_ml_sdy", "J_ml_sdz")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x = LM.Name, y = value, fill=LM.Name))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Standard deviation")+ggtitle("Standard deviation of x, y, and z")
JulieIntra$J_mlloo_sdx <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("J_ml_x1", "J_ml_x2", "J_ml_x3", "J_loo_x")]))
JulieIntra$J_mlloo_sdy <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("J_ml_y1", "J_ml_y2", "J_ml_y3", "J_loo_y")]))
JulieIntra$J_mlloo_sdz <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("J_ml_z1", "J_ml_z2", "J_ml_z3", "J_loo_z")]))
mean(JulieIntra$J_mlloo_sdx)
mean(JulieIntra$J_mlloo_sdy)
mean(JulieIntra$J_mlloo_sdz)
multiplot(
ggplot(data = melt(JulieIntra[, c("ID", "LM.Num", "LM.Name", "J_ml_sdx", "J_mlloo_sdx")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Standard Deviation (mm)")+ggtitle("X"),
ggplot(data = melt(JulieIntra[, c("ID", "LM.Num", "LM.Name", "J_ml_sdy", "J_mlloo_sdy")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Standard Deviation (mm)")+ggtitle("Y"),
ggplot(data = melt(JulieIntra[, c("ID", "LM.Num", "LM.Name", "J_ml_sdz", "J_mlloo_sdz")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Standard Deviation (mm)")+ggtitle("Z"),
cols=3)
JulieIntraSDMelt <- melt(JulieIntra[, c("ID", "LM.Num", "LM.Name", "J_ml_sdx", "J_ml_sdy", "J_ml_sdz", "J_mlloo_sdx", "J_mlloo_sdy", "J_mlloo_sdz")], id.vars = c("ID", "LM.Num", "LM.Name"))
levels(JulieIntraSDMelt$variable) <- c("ML", "ML", "ML", "ML+loo", "ML+loo", "ML+loo")
ggplot(data = JulieIntraSDMelt, aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Standard Deviation (mm)")
JulieIntra$J_ml_euclid_1tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x1'], x['J_ml_avgx'], x['J_ml_y1'], x['J_ml_avgy'], x['J_ml_z1'], x['J_ml_avgz']))
JulieIntra$J_ml_euclid_2tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x2'], x['J_ml_avgx'], x['J_ml_y2'], x['J_ml_avgy'], x['J_ml_z2'], x['J_ml_avgz']))
JulieIntra$J_ml_euclid_3tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x3'], x['J_ml_avgx'], x['J_ml_y3'], x['J_ml_avgy'], x['J_ml_z3'], x['J_ml_avgz']))
mean(JulieIntra$J_ml_euclid_1tocent)
mean(JulieIntra$J_ml_euclid_2tocent)
mean(JulieIntra$J_ml_euclid_3tocent)
ggplot(data = melt(JulieIntra[, c("ID", "LM.Num", "LM.Name", "J_ml_euclid_1tocent", "J_ml_euclid_2tocent", "J_ml_euclid_3tocent")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")
ggplot(data = melt(JulieIntra[, c("ID", "LM.Num", "LM.Name", "J_ml_euclid_1tocent", "J_ml_euclid_2tocent", "J_ml_euclid_3tocent")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x = LM.Name, y = value, fill=LM.Name))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")+ggtitle("Euclidean distances to centroid")
landmarks$J_mlloo_avgx <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("J_ml_x1", "J_ml_x2", "J_ml_x3", "J_loo_x")]))
landmarks$J_mlloo_avgy <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("J_ml_y1", "J_ml_y2", "J_ml_y3", "J_loo_y")]))
landmarks$J_mlloo_avgz <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("J_ml_z1", "J_ml_z2", "J_ml_z3", "J_loo_z")]))
JulieIntra$J_mlloo_euclid_1tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x1'], x['J_mlloo_avgx'], x['J_ml_y1'], x['J_mlloo_avgy'], x['J_ml_z1'], x['J_mlloo_avgz']))
JulieIntra$J_mlloo_euclid_2tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x2'], x['J_mlloo_avgx'], x['J_ml_y2'], x['J_mlloo_avgy'], x['J_ml_z2'], x['J_mlloo_avgz']))
JulieIntra$J_mlloo_euclid_3tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x3'], x['J_mlloo_avgx'], x['J_ml_y3'], x['J_mlloo_avgy'], x['J_ml_z3'], x['J_mlloo_avgz']))
JulieIntra$J_mlloo_euclid_lootocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_loo_x'], x['J_mlloo_avgx'], x['J_loo_y'], x['J_mlloo_avgy'], x['J_loo_z'], x['J_mlloo_avgz']))
mean(JulieIntra$J_mlloo_euclid_1tocent)
mean(JulieIntra$J_mlloo_euclid_2tocent)
mean(JulieIntra$J_mlloo_euclid_3tocent)
mean(JulieIntra$J_mlloo_euclid_lootocent)
ggplot(data = melt(JulieIntra[, c("ID", "LM.Num", "LM.Name", "J_mlloo_euclid_1tocent", "J_mlloo_euclid_2tocent", "J_mlloo_euclid_3tocent", "J_mlloo_euclid_lootocent")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")
JulieIntraCentMelt <- melt(JulieIntra[, c("ID", "LM.Num", "LM.Name", "J_ml_euclid_1tocent", "J_ml_euclid_2tocent", "J_ml_euclid_3tocent", "J_mlloo_euclid_1tocent", "J_mlloo_euclid_2tocent", "J_mlloo_euclid_3tocent", "J_mlloo_euclid_lootocent")], id.vars = c("ID", "LM.Num", "LM.Name"))
levels(JulieIntraCentMelt$variable) <- c("ML", "ML", "ML", "ML+loo", "ML+loo", "ML+loo", "ML+loo")
ggplot(data = JulieIntraCentMelt, aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Euclidean distance to centroid")
#Julie x1 - x2
#Julie x1 - x3
#Julie x2 - x3
JulieIntra$J_ml_euclid_1to2 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x1'], x['J_ml_x2'], x['J_ml_y1'], x['J_ml_y2'], x['J_ml_z1'], x['J_ml_z2']))
JulieIntra$J_ml_euclid_1to3 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x1'], x['J_ml_x3'], x['J_ml_y1'], x['J_ml_y3'], x['J_ml_z1'], x['J_ml_z3']))
JulieIntra$J_ml_euclid_2to3 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x2'], x['J_ml_x3'], x['J_ml_y2'], x['J_ml_y3'], x['J_ml_z2'], x['J_ml_z3']))
ggplot(data = melt(JulieIntra[, c("ID", "LM.Num", "LM.Name", "J_ml_euclid_1to2", "J_ml_euclid_1to3", "J_ml_euclid_2to3")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")
ggplot(data = melt(JulieIntra[, c("ID", "LM.Num", "LM.Name", "J_ml_euclid_1to2", "J_ml_euclid_1to3", "J_ml_euclid_2to3")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x = LM.Name, y = value, fill=LM.Name))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")+ggtitle("Pairwise euclidean distances")
#Julie x1 - x2
#Julie x1 - x3
#Julie x2 - x3
#Julie x1 - loo
#Julie x2 - loo
#Julie x3 - loo
JulieIntra$J_ml_euclid_1toloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x1'], x['J_loo_x'], x['J_ml_y1'], x['J_loo_y'], x['J_ml_z1'], x['J_loo_z']))
JulieIntra$J_ml_euclid_2toloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x2'], x['J_loo_x'], x['J_ml_y2'], x['J_loo_y'], x['J_ml_z2'], x['J_loo_z']))
JulieIntra$J_ml_euclid_3toloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x3'], x['J_loo_x'], x['J_ml_y3'], x['J_loo_y'], x['J_ml_z3'], x['J_loo_z']))
ggplot(data = melt(JulieIntra[, c("ID", "LM.Num", "LM.Name", "J_ml_euclid_1to2", "J_ml_euclid_1to3", "J_ml_euclid_2to3", "J_ml_euclid_1toloo", "J_ml_euclid_2toloo", "J_ml_euclid_3toloo")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")
JulieIntraPairwiseMelt <- melt(JulieIntra[, c("ID", "LM.Num", "LM.Name", "J_ml_euclid_1to2", "J_ml_euclid_1to3", "J_ml_euclid_2to3", "J_ml_euclid_1toloo", "J_ml_euclid_2toloo", "J_ml_euclid_3toloo")], id.vars = c("ID", "LM.Num", "LM.Name"))
levels(JulieIntraPairwiseMelt$variable) <- c("ML", "ML", "ML", "ML+loo", "ML+loo", "ML+loo")
ggplot(data = JulieIntraPairwiseMelt, aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Pairwise euclidean distance between iterations")
JulieIntraPairwiseMelt_JustML <- melt(JulieIntra[, c("ID", "LM.Num", "LM.Name", "J_ml_euclid_1to2", "J_ml_euclid_1to3", "J_ml_euclid_2to3")], id.vars = c("ID", "LM.Num", "LM.Name"))
JulieIntraPairwiseMelt2 <- rbind(JulieIntraPairwiseMelt, JulieIntraPairwiseMelt_JustML)
rm(JulieIntraPairwiseMelt_JustML)
#Change variable names in just ML
levels(JulieIntraPairwiseMelt2$variable) <- c("ML+loo", "ML+loo", "ML", "ML", "ML")
ggplot(JulieIntraPairwiseMelt2, aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+ theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1))+ylab("Euclidean distance")+ggtitle("Pairwise euclidean distance for just ML and ML+loo values")
BothIntra <- landmarks[,c("ID", "LM.Num", "LM.Name")]
BothIntra$B_mlloo_sdx <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("B_ml_avgx", "B_loo_x")]))
BothIntra$B_mlloo_sdy <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("B_ml_avgy", "B_loo_y")]))
BothIntra$B_mlloo_sdz <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("B_ml_avgz", "B_loo_z")]))
mean(BothIntra$B_mlloo_sdx)
mean(BothIntra$B_mlloo_sdy)
mean(BothIntra$B_mlloo_sdz)
ggplot(data = melt(BothIntra[, c("ID", "LM.Num", "LM.Name", "B_mlloo_sdx", "B_mlloo_sdy", "B_mlloo_sdz")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Standard Deviation (mm)")
ggplot(data = melt(BothIntra[, c("ID", "LM.Num", "LM.Name", "B_mlloo_sdx", "B_mlloo_sdy", "B_mlloo_sdz")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x = LM.Name, y = value, fill=LM.Name))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Standard deviation")+ggtitle("Standard deviation of x, y, and z")
landmarks$B_mlloo_avgx <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("B_ml_avgx", "B_loo_x")]))
landmarks$B_mlloo_avgy <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("B_ml_avgy", "B_loo_y")]))
landmarks$B_mlloo_avgz <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("B_ml_avgz", "B_loo_z")]))
BothIntra$B_mlloo_mltoavg <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['B_ml_avgx'], x['B_mlloo_avgx'], x['B_ml_avgy'], x['B_mlloo_avgy'], x['B_mlloo_avgz'], x['B_mlloo_avgz']))
BothIntra$B_mlloo_lootoavg <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['B_loo_x'], x['B_mlloo_avgx'], x['B_loo_y'], x['B_mlloo_avgy'], x['B_loo_z'], x['B_mlloo_avgz']))
mean(BothIntra$B_mlloo_mltoavg)
mean(BothIntra$B_mlloo_lootoavg)
ggplot(data = melt(BothIntra[, c("ID", "LM.Num", "LM.Name", "B_mlloo_mltoavg", "B_mlloo_lootoavg")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Euclidean distance")
ggplot(data = melt(BothIntra[, c("ID", "LM.Num", "LM.Name", "B_mlloo_mltoavg", "B_mlloo_lootoavg")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x = LM.Name, y = value, fill=LM.Name))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")
ggplot(data = melt(landmarks[,c("ID", "LM.Num", "LM.Name", "B_ml_loo_euclid")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y = value, fill = variable))+geom_boxplot()+theme(legend.position = "top", axis.text.x = element_text(angle=90, hjust=1, vjust=0))
IntraByLandmark <- merge(ddply(.data = ArslanIntra, ~ LM.Name , summarize,
A_ml_sdx = mean(A_ml_sdx),
A_ml_sdy = mean(A_ml_sdy),
A_ml_sdz = mean(A_ml_sdz),
A_mlloo_sdx = mean(A_mlloo_sdx),
A_mlloo_sdy = mean(A_mlloo_sdy),
A_mlloo_sdz = mean(A_mlloo_sdz),
A_ml_euclid_1tocent = mean(A_ml_euclid_1tocent),
A_ml_euclid_2tocent = mean(A_ml_euclid_2tocent),
A_ml_euclid_3tocent = mean(A_ml_euclid_3tocent),
A_mlloo_euclid_1tocent = mean(A_mlloo_euclid_1tocent),
A_mlloo_euclid_2tocent = mean(A_mlloo_euclid_2tocent),
A_mlloo_euclid_3tocent = mean(A_mlloo_euclid_3tocent),
A_mlloo_euclid_lootocent = mean(A_mlloo_euclid_lootocent),
A_ml_euclid_1to2 = mean(A_ml_euclid_1to2),
A_ml_euclid_1to3 = mean(A_ml_euclid_1to3),
A_ml_euclid_2to3 = mean(A_ml_euclid_2to3),
A_ml_euclid_1toloo = mean(A_ml_euclid_1toloo),
A_ml_euclid_1toloo = mean(A_ml_euclid_2toloo),
A_ml_euclid_1toloo = mean(A_ml_euclid_3toloo)),
ddply(.data = JulieIntra, ~ LM.Name , summarize,
J_ml_sdx = mean(J_ml_sdx),
J_ml_sdy = mean(J_ml_sdy),
J_ml_sdz = mean(J_ml_sdz),
J_mlloo_sdx = mean(J_mlloo_sdx),
J_mlloo_sdy = mean(J_mlloo_sdy),
J_mlloo_sdz = mean(J_mlloo_sdz),
J_ml_euclid_1tocent = mean(J_ml_euclid_1tocent),
J_ml_euclid_2tocent = mean(J_ml_euclid_2tocent),
J_ml_euclid_3tocent = mean(J_ml_euclid_3tocent),
J_mlloo_euclid_1tocent = mean(J_mlloo_euclid_1tocent),
J_mlloo_euclid_2tocent = mean(J_mlloo_euclid_2tocent),
J_mlloo_euclid_3tocent = mean(J_mlloo_euclid_3tocent),
J_mlloo_euclid_lootocent = mean(J_mlloo_euclid_lootocent),
J_ml_euclid_1to2 = mean(J_ml_euclid_1to2),
J_ml_euclid_1to3 = mean(J_ml_euclid_1to3),
J_ml_euclid_2to3 = mean(J_ml_euclid_2to3),
J_ml_euclid_1toloo = mean(J_ml_euclid_1toloo),
J_ml_euclid_1toloo = mean(J_ml_euclid_2toloo),
J_ml_euclid_1toloo = mean(J_ml_euclid_3toloo)), by = "LM.Name")
IntraByLandmark <- merge(IntraByLandmark,
ddply(.data = BothIntra, ~ LM.Name, summarize,
B_mlloo_mltoavg = mean(B_mlloo_mltoavg),
B_mlloo_lootoavg = mean(B_mlloo_lootoavg)),
by = "LM.Name")
IntraByLandmark <- merge(IntraByLandmark,
ddply(.data = landmarks, ~ LM.Name, summarize,
B_ml_loo_euclid = mean(B_ml_loo_euclid)),
by = "LM.Name")
#Average
t(as.data.frame.list(colMeans(IntraByLandmark[,-1],na.rm=TRUE)))
Inter <- landmarks[,c("ID", "LM.Num", "LM.Name")]
Inter$AJ_ml_sdx <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("A_ml_avgx", "J_ml_avgx")]))
Inter$AJ_ml_sdy <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("A_ml_avgy", "J_ml_avgy")]))
Inter$AJ_ml_sdz <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("A_ml_avgz", "J_ml_avgz")]))
mean(Inter$AJ_ml_sdx)
mean(Inter$AJ_ml_sdy)
mean(Inter$AJ_ml_sdz)
ggplot(data = melt(Inter[, c("ID", "LM.Num", "LM.Name", "AJ_ml_sdx", "AJ_ml_sdy", "AJ_ml_sdz")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Standard Deviation (mm)")
Inter[which(Inter$AJ_ml_sdx == max(Inter$AJ_ml_sdx)),]
ggplot(data = melt(Inter[, c("ID", "LM.Num", "LM.Name", "AJ_ml_sdx", "AJ_ml_sdy", "AJ_ml_sdz")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=LM.Name))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Standard Deviation (mm)")+ggtitle("Standard deviation between Arslan and Julie x, y, and z")
Inter$AJ_loo_sdx <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("A_loo_x", "J_loo_x")]))
Inter$AJ_loo_sdy <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("A_loo_y", "J_loo_y")]))
Inter$AJ_loo_sdz <- apply(landmarks[4:ncol(landmarks)], 1, function(x) sd(x[c("A_loo_z", "J_loo_z")]))
mean(Inter$AJ_loo_sdx)
mean(Inter$AJ_loo_sdy)
mean(Inter$AJ_loo_sdz)
ggplot(data = melt(Inter[, c("ID", "LM.Num", "LM.Name", "AJ_loo_sdx", "AJ_loo_sdy", "AJ_loo_sdz")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Standard Deviation (mm)")
InterSDMelt <- melt(Inter, id.vars = c("ID", "LM.Num", "LM.Name"))
levels(InterSDMelt$variable) <- c("ML", "ML", "ML", "loo", "loo", "loo")
ggplot(InterSDMelt, aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Standard Deviation (mm)")+facet_wrap(~variable)
#Arslan
Inter$Ml_euclid_A1tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x1'], x['B_ml_avgx'], x['A_ml_y1'], x['B_ml_avgy'], x['A_ml_z1'], x['B_ml_avgz']))
Inter$Ml_euclid_A2tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x2'], x['B_ml_avgx'], x['A_ml_y2'], x['B_ml_avgy'], x['A_ml_z2'], x['B_ml_avgz']))
Inter$Ml_euclid_A3tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x3'], x['B_ml_avgx'], x['A_ml_y3'], x['B_ml_avgy'], x['A_ml_z3'], x['B_ml_avgz']))
#Julie
Inter$Ml_euclid_J1tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x1'], x['B_ml_avgx'], x['J_ml_y1'], x['B_ml_avgy'], x['J_ml_z1'], x['B_ml_avgz']))
Inter$Ml_euclid_J2tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x2'], x['B_ml_avgx'], x['J_ml_y2'], x['B_ml_avgy'], x['J_ml_z2'], x['B_ml_avgz']))
Inter$Ml_euclid_J3tocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x3'], x['B_ml_avgx'], x['J_ml_y3'], x['B_ml_avgy'], x['J_ml_z3'], x['B_ml_avgz']))
mean(Inter$Ml_euclid_A1tocent)
mean(Inter$Ml_euclid_A2tocent)
mean(Inter$Ml_euclid_A3tocent)
mean(Inter$Ml_euclid_J1tocent)
mean(Inter$Ml_euclid_J2tocent)
mean(Inter$Ml_euclid_J3tocent)
ggplot(data = melt(Inter[, c("ID", "LM.Num", "LM.Name", "Ml_euclid_A1tocent", "Ml_euclid_A2tocent", "Ml_euclid_A3tocent", "Ml_euclid_J1tocent", "Ml_euclid_J2tocent", "Ml_euclid_J3tocent")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")+facet_wrap(~variable)
InterMLMelt <- melt(Inter[c("ID", "LM.Num", "LM.Name", "Ml_euclid_A1tocent", "Ml_euclid_A2tocent", "Ml_euclid_A3tocent", "Ml_euclid_J1tocent", "Ml_euclid_J2tocent", "Ml_euclid_J3tocent")], id.vars = c("ID", "LM.Num", "LM.Name"))
levels(InterMLMelt$variable) <- c("Arslan", "Arslan", "Arslan", "Julie", "Julie", "Julie")
ggplot(InterMLMelt, aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Euclidean distance to centroid")
ggplot(data = melt(Inter[, c("ID", "LM.Num", "LM.Name", "Ml_euclid_A1tocent", "Ml_euclid_A2tocent", "Ml_euclid_A3tocent", "Ml_euclid_J1tocent", "Ml_euclid_J2tocent", "Ml_euclid_J3tocent")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=LM.Name))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")+ggtitle("Euclidean distance of A and J's iterations to centroid of all six iterations")
#Arslan
Inter$loo_euclid_AtoB <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_loo_x'], x['B_loo_x'], x['A_loo_y'], x['B_loo_y'], x['A_loo_z'], x['B_loo_z']))
#Julie
Inter$loo_euclid_JtoB <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_loo_x'], x['B_loo_x'], x['J_loo_y'], x['B_loo_y'], x['J_loo_z'], x['B_loo_z']))
mean(Inter$loo_euclid_AtoB)
mean(Inter$loo_euclid_JtoB)
ggplot(data = melt(Inter[, c("ID", "LM.Num", "LM.Name", "Ml_euclid_A1tocent", "Ml_euclid_A2tocent", "Ml_euclid_A3tocent", "Ml_euclid_J1tocent", "Ml_euclid_J2tocent", "Ml_euclid_J3tocent", "loo_euclid_AtoB", "loo_euclid_JtoB")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")+facet_wrap(~variable)
InterlooToBMelt <- melt(Inter[c("ID", "LM.Num", "LM.Name", "Ml_euclid_A1tocent", "Ml_euclid_A2tocent", "Ml_euclid_A3tocent", "Ml_euclid_J1tocent", "Ml_euclid_J2tocent", "Ml_euclid_J3tocent", "loo_euclid_AtoB", "loo_euclid_JtoB")], id.vars = c("ID", "LM.Num", "LM.Name"))
levels(InterlooToBMelt$variable) <- c("Arslan ML", "Arslan ML", "Arslan ML", "Julie ML", "Julie ML", "Julie ML", "loo", "loo")
ggplot(InterlooToBMelt, aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Euclidean distance to centroid")
landmarks$AJ_loo_x <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("A_loo_x", "J_loo_x")]))
landmarks$AJ_loo_y <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("A_loo_y", "J_loo_y")]))
landmarks$AJ_loo_z <- apply(landmarks[4:ncol(landmarks)], 1, function(x) mean(x[c("A_loo_z", "J_loo_z")]))
#Arslan
Inter$AJ_loo_euclid_Atocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_loo_x'], x['AJ_loo_x'], x['A_loo_y'], x['AJ_loo_y'], x['A_loo_z'], x['AJ_loo_z']))
#Julie
Inter$AJ_loo_euclid_Jtocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_loo_x'], x['AJ_loo_x'], x['J_loo_y'], x['AJ_loo_y'], x['J_loo_z'], x['AJ_loo_z']))
#Both
Inter$AJ_loo_euclid_Btocent <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['B_loo_x'], x['AJ_loo_x'], x['B_loo_y'], x['AJ_loo_y'], x['B_loo_z'], x['AJ_loo_z']))
mean(Inter$AJ_loo_euclid_Atocent)
mean(Inter$AJ_loo_euclid_Jtocent)
mean(Inter$AJ_loo_euclid_Btocent)
ggplot(data = melt(Inter[, c("ID", "LM.Num", "LM.Name", "Ml_euclid_A1tocent", "Ml_euclid_A2tocent", "Ml_euclid_A3tocent", "Ml_euclid_J1tocent", "Ml_euclid_J2tocent", "Ml_euclid_J3tocent", "loo_euclid_AtoB", "loo_euclid_JtoB", "AJ_loo_euclid_Atocent", "AJ_loo_euclid_Jtocent")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")+facet_wrap(~variable)
InterLooToCentMelt <- melt(Inter[c("ID", "LM.Num", "LM.Name", "Ml_euclid_A1tocent", "Ml_euclid_A2tocent", "Ml_euclid_A3tocent", "Ml_euclid_J1tocent", "Ml_euclid_J2tocent", "Ml_euclid_J3tocent", "loo_euclid_AtoB", "loo_euclid_JtoB", "AJ_loo_euclid_Atocent", "AJ_loo_euclid_Jtocent")], id.vars = c("ID", "LM.Num", "LM.Name"))
levels(InterLooToCentMelt$variable) <- c("ML", "ML", "ML to B", "ML to B", "ML to B", "ML to B", "loo to B", "loo to B", "loo to AJ avg", "loo to AJ avg")
ggplot(InterLooToCentMelt, aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Euclidean distance to centroid")
#Arslan x1 - Julie x1
#Arslan x1 - Julie x2
#Arslan x1 - Julie x3
#Arslan x2 - Julie x1
#Arslan x2 - Julie x2
#Arslan x2 - Julie x3
#Arslan x3 - Julie x1
#Arslan x3 - Julie x2
#Arslan x3 - Julie x3
Inter$AJ_euclid_A1toJ1 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x1'], x['J_ml_x1'], x['A_ml_y1'], x['J_ml_y1'], x['A_ml_z1'], x['J_ml_z1']))
Inter$AJ_euclid_A1toJ2 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x1'], x['J_ml_x2'], x['A_ml_y1'], x['J_ml_y2'], x['A_ml_z1'], x['J_ml_z2']))
Inter$AJ_euclid_A1toJ3 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x1'], x['J_ml_x3'], x['A_ml_y1'], x['J_ml_y3'], x['A_ml_z1'], x['J_ml_z3']))
Inter$AJ_euclid_A2toJ1 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x2'], x['J_ml_x1'], x['A_ml_y2'], x['J_ml_y1'], x['A_ml_z2'], x['J_ml_z1']))
Inter$AJ_euclid_A2toJ2 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x2'], x['J_ml_x2'], x['A_ml_y2'], x['J_ml_y2'], x['A_ml_z2'], x['J_ml_z2']))
Inter$AJ_euclid_A2toJ3 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x2'], x['J_ml_x3'], x['A_ml_y2'], x['J_ml_y3'], x['A_ml_z2'], x['J_ml_z3']))
Inter$AJ_euclid_A3toJ1 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x3'], x['J_ml_x1'], x['A_ml_y3'], x['J_ml_y1'], x['A_ml_z3'], x['J_ml_z1']))
Inter$AJ_euclid_A3toJ2 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x3'], x['J_ml_x2'], x['A_ml_y3'], x['J_ml_y2'], x['A_ml_z3'], x['J_ml_z2']))
Inter$AJ_euclid_A3toJ3 <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x3'], x['J_ml_x3'], x['A_ml_y3'], x['J_ml_y3'], x['A_ml_z3'], x['J_ml_z3']))
ggplot(data = melt(Inter[, c("ID", "LM.Num", "LM.Name", "AJ_euclid_A1toJ1", "AJ_euclid_A1toJ2", "AJ_euclid_A1toJ3", "AJ_euclid_A2toJ1", "AJ_euclid_A2toJ2", "AJ_euclid_A2toJ3", "AJ_euclid_A3toJ1", "AJ_euclid_A3toJ2", "AJ_euclid_A3toJ3")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")+facet_wrap(~variable)
ggplot(data = melt(Inter[, c("ID", "LM.Num", "LM.Name", "AJ_euclid_A1toJ1", "AJ_euclid_A1toJ2", "AJ_euclid_A1toJ3", "AJ_euclid_A2toJ1", "AJ_euclid_A2toJ2", "AJ_euclid_A2toJ3", "AJ_euclid_A3toJ1", "AJ_euclid_A3toJ2", "AJ_euclid_A3toJ3")], id.vars = c("ID", "LM.Num", "LM.Name")), aes(x=LM.Name, y=value, fill=LM.Name))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "none")+ylab("Euclidean distance")+ggtitle("Pairwise euclidean distance for all observers and iterations")
Inter$Euclid_A1toJloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x1'], x['J_loo_x'], x['A_ml_y1'], x['J_loo_y'], x['A_ml_z1'], x['J_loo_z']))
Inter$Euclid_A2toJloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x2'], x['J_loo_x'], x['A_ml_y2'], x['J_loo_y'], x['A_ml_z2'], x['J_loo_z']))
Inter$Euclid_A3toJloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_x3'], x['J_loo_x'], x['A_ml_y3'], x['J_loo_y'], x['A_ml_z3'], x['J_loo_z']))
Inter$Euclid_J1toAloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x1'], x['A_loo_x'], x['J_ml_y1'], x['A_loo_y'], x['J_ml_z1'], x['A_loo_z']))
Inter$Euclid_J2toAloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x2'], x['A_loo_x'], x['J_ml_y2'], x['A_loo_y'], x['J_ml_z2'], x['A_loo_z']))
Inter$Euclid_J3toAloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_x3'], x['A_loo_x'], x['J_ml_y3'], x['A_loo_y'], x['J_ml_z3'], x['A_loo_z']))
Inter$Euclid_AlootoJloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_loo_x'], x['J_loo_x'], x['A_loo_y'], x['J_loo_y'], x['A_loo_z'], x['J_loo_z']))
InterPairwiseMelt <- melt(Inter[c("ID", "LM.Num", "LM.Name", "AJ_euclid_A1toJ1", "AJ_euclid_A1toJ2", "AJ_euclid_A1toJ3", "AJ_euclid_A2toJ1", "AJ_euclid_A2toJ2", "AJ_euclid_A2toJ3", "AJ_euclid_A3toJ1", "AJ_euclid_A3toJ2", "AJ_euclid_A3toJ3", "Euclid_A1toJloo", "Euclid_A2toJloo", "Euclid_A3toJloo", "Euclid_J1toAloo", "Euclid_J2toAloo", "Euclid_J3toAloo", "Euclid_AlootoJloo")], id.vars = c("ID", "LM.Num", "LM.Name"))
levels(InterPairwiseMelt$variable) <- c("ML to ML", "ML to ML", "ML to ML", "ML to ML", "ML to ML", "ML to ML", "ML to ML", "ML to ML", "ML to ML", "ML to loo", "ML to loo", "ML to loo", "ML to loo", "ML to loo", "ML to loo", "loo to loo")
ggplot(InterPairwiseMelt, aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Pairwise euclidean distance")
Inter$Euclid_AavgtoJavg <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_avgx'], x['J_ml_avgx'], x['A_ml_avgy'], x['J_ml_avgy'], x['A_ml_avgz'], x['J_ml_avgz']))
Inter$Euclid_AavgtoJloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['A_ml_avgx'], x['J_loo_x'], x['A_ml_avgy'], x['J_loo_y'], x['A_ml_avgz'], x['J_loo_z']))
Inter$Euclid_JavgtoAloo <- apply(landmarks[4:ncol(landmarks)], 1, function(x) EuclideanDistance(x['J_ml_avgx'], x['A_loo_x'], x['J_ml_avgy'], x['A_loo_y'], x['J_ml_avgz'], x['A_loo_z']))
InterPairwiseAvgMelt <- melt(Inter[c("ID", "LM.Num", "LM.Name", "Euclid_AavgtoJavg", "Euclid_AavgtoJloo", "Euclid_JavgtoAloo", "Euclid_AlootoJloo")], id.vars = c("ID", "LM.Num", "LM.Name"))
levels(InterPairwiseAvgMelt$variable) <- c("ML to ML", "ML to loo", "ML to loo", "loo to loo")
ggplot(InterPairwiseAvgMelt, aes(x=LM.Name, y=value, fill=variable))+geom_boxplot()+theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.1), legend.position = "top")+ylab("Pairwise euclidean distance")
colnames(Inter)
InterByLandmark <- ddply(.data = Inter, ~ LM.Name , summarize,
AJ_ml_sdx = mean(AJ_ml_sdx),
AJ_ml_sdy = mean(AJ_ml_sdy),
AJ_ml_sdz = mean(AJ_ml_sdz),
AJ_loo_sdx = mean(AJ_loo_sdx),
AJ_loo_sdy = mean(AJ_loo_sdy),
AJ_loo_sdz = mean(AJ_loo_sdz),
Ml_euclid_A1tocent = mean(Ml_euclid_A1tocent),
Ml_euclid_A2tocent = mean(Ml_euclid_A2tocent),
Ml_euclid_A3tocent = mean(Ml_euclid_A3tocent),
Ml_euclid_J1tocent = mean(Ml_euclid_J1tocent),
Ml_euclid_J2tocent = mean(Ml_euclid_J2tocent),
Ml_euclid_J3tocent = mean(Ml_euclid_J3tocent),
loo_euclid_AtoB = mean(loo_euclid_AtoB),
loo_euclid_JtoB = mean(loo_euclid_JtoB),
AJ_loo_euclid_Atocent = mean(AJ_loo_euclid_Atocent),
AJ_loo_euclid_Jtocent = mean(AJ_loo_euclid_Jtocent),
AJ_loo_euclid_Btocent = mean(AJ_loo_euclid_Btocent),
AJ_euclid_A1toJ1 = mean(AJ_euclid_A1toJ1),
AJ_euclid_A1toJ2 = mean(AJ_euclid_A1toJ2),
AJ_euclid_A1toJ3 = mean(AJ_euclid_A1toJ3),
AJ_euclid_A2toJ1 = mean(AJ_euclid_A2toJ1),
AJ_euclid_A2toJ2 = mean(AJ_euclid_A2toJ2),
AJ_euclid_A2toJ3 = mean(AJ_euclid_A2toJ3),
AJ_euclid_A3toJ1 = mean(AJ_euclid_A3toJ1),
AJ_euclid_A3toJ2 = mean(AJ_euclid_A3toJ2),
AJ_euclid_A3toJ3 = mean(AJ_euclid_A3toJ3),
Euclid_A1toJloo = mean(Euclid_A1toJloo),
Euclid_A2toJloo = mean(Euclid_A2toJloo),
Euclid_A3toJloo = mean(Euclid_A3toJloo),
Euclid_J1toAloo = mean(Euclid_J1toAloo),
Euclid_J2toAloo = mean(Euclid_J2toAloo),
Euclid_J3toAloo = mean(Euclid_J3toAloo),
Euclid_AlootoJloo = mean(Euclid_AlootoJloo),
Euclid_AavgtoJavg = mean(Euclid_AavgtoJavg),
Euclid_AavgtoJloo = mean(Euclid_AavgtoJloo),
Euclid_JavgtoAloo = mean(Euclid_JavgtoAloo))
#Average
t(as.data.frame.list(colMeans(InterByLandmark[,-1],na.rm=TRUE)))
colnames(Inter)
colnames(ArslanIntra)
